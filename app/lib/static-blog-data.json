[
  {
    "metadata": {
      "meta:": "",
      "title": "Should a Digital Manufacturing Company Buy or Build their ERP/MES in 2025?",
      "publishedAt": "2025-01-01",
      "summary": "The article discusses whether digital manufacturing companies should buy off-the-shelf ERP/MES software or build their own in 2025, ultimately advocating for a hybrid \"Buy and Build\" approach using Carbon, which provides core functionality while allowing extensive customization and integration capabilities.",
      "image": "/images/marble-statue.webp",
      "author": "rob"
    },
    "slug": "build-vs-buy",
    "html": "<p>In 2025, digital manufacturers are looking for three main qualities when it comes to their software stack:</p>\n<ul>\n<li>A streamlined buying experience for their customers</li>\n<li>Visibility into every aspect of their business, so they can make data-driven decisions</li>\n<li>A comprehensive end-to-end system that allows them to automate their business processes and minimize manual data entry</li>\n</ul>\n<p>There are some high-profile examples of advanced manufacturing companies building their own ERP/MES solutions (Hadrian, Anduril, SpaceX, and Tesla, for example).</p>\n<p>How should you make the build vs. buy decision for your ERP/MES?</p>\n<p>In this article we'll explore the pros and cons of each approach, as well as a third hybrid approach: Buy <em>and</em> Build.</p>\n<h2 id=\"pros-and-cons-of-buying-an-erpmes\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pros-and-cons-of-buying-an-erpmes\"><span class=\"icon icon-link\"></span></a>Pros and cons of <strong>buying</strong> an ERP/MES</h2>\n<h3 id=\"pros\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pros\"><span class=\"icon icon-link\"></span></a>Pros</h3>\n<h4 id=\"hit-the-ground-running\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#hit-the-ground-running\"><span class=\"icon icon-link\"></span></a>Hit the ground running</h4>\n<p>Buying an off-the-shelf solution allows you to start using the software immediately, without waiting for it to be developed.</p>\n<h4 id=\"lower-upfront-costs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lower-upfront-costs\"><span class=\"icon icon-link\"></span></a>Lower upfront costs</h4>\n<p>The upfront cost of an off-the-shelf solution is much lower than building your own system from scratch.</p>\n<h3 id=\"cons\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cons\"><span class=\"icon icon-link\"></span></a>Cons</h3>\n<h4 id=\"off-the-shelf-solutions-cover-at-best-80-of-your-needs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#off-the-shelf-solutions-cover-at-best-80-of-your-needs\"><span class=\"icon icon-link\"></span></a>Off-the-shelf solutions cover at best 80% of your needs</h4>\n<p>Off-the-shelf solutions are generic by design – there isn't an off-the-shelf product that can meet 100% of your needs.</p>\n<h4 id=\"it-is-challenging-to-close-the-remaining-20-gap\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#it-is-challenging-to-close-the-remaining-20-gap\"><span class=\"icon icon-link\"></span></a>It is challenging to close the remaining 20% gap</h4>\n<p>Without access to the source code, there is a limit to the customizations you can build on top of these systems. Off-the-shelf software vendors are unlikely to prioritize your specific needs in their roadmap, since they are building a product that needs to work for their entire customer base. You can piece together multiple off-the-shelf solutions, but that creates a different set of problems.</p>\n<h4 id=\"risk-of-vendor-lock-in\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#risk-of-vendor-lock-in\"><span class=\"icon icon-link\"></span></a>Risk of vendor lock-in</h4>\n<p>Your ERP/MES is a mission critical part of your business. If you rent your software and the vendor decides to double your price at your next contract renewal, you have little recourse.</p>\n<h4 id=\"lack-of-direct-access-to-your-data\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lack-of-direct-access-to-your-data\"><span class=\"icon icon-link\"></span></a>Lack of direct access to your data</h4>\n<p>Most modern solutions are hosted in the cloud in a shared database (multi-tenant), meaning you can't have direct access to your data. This makes it harder to connect best-in-class BI / data visualization tools, meaning you have to rely on the reporting functionality within the ERP/MES itself.</p>\n<h2 id=\"pros-and-cons-of-building-an-erpmes\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pros-and-cons-of-building-an-erpmes\"><span class=\"icon icon-link\"></span></a>Pros and cons of <strong>building</strong> an ERP/MES</h2>\n<h3 id=\"pros-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pros-1\"><span class=\"icon icon-link\"></span></a>Pros</h3>\n<h4 id=\"software-and-automation-are-part-of-your-competitive-advantage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#software-and-automation-are-part-of-your-competitive-advantage\"><span class=\"icon icon-link\"></span></a>Software and automation are part of your competitive advantage</h4>\n<p>Some of the ways you can differentiate yourself from your competitors include:</p>\n<ul>\n<li>Your approach to customer service</li>\n<li>The proprietary technology and manufacturing techniques you develop</li>\n<li>The data you collect, and the decisions you make with that data</li>\n</ul>\n<p>Custom software can play a critical part in all three of these.</p>\n<h4 id=\"tailored-to-your-unique-needs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tailored-to-your-unique-needs\"><span class=\"icon icon-link\"></span></a>Tailored to your unique needs</h4>\n<p>You can change your software to match the way your business operates, rather than changing the way your business operates to match your software.</p>\n<h3 id=\"cons-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cons-1\"><span class=\"icon icon-link\"></span></a>Cons</h3>\n<h4 id=\"high-upfront-costs-and-longer-timeline\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#high-upfront-costs-and-longer-timeline\"><span class=\"icon icon-link\"></span></a>High upfront costs and longer timeline</h4>\n<p>Starting from scratch means you won't have the software you need in place to run your business for many months (12+ in most cases).</p>\n<h3 id=\"software-design-risks\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#software-design-risks\"><span class=\"icon icon-link\"></span></a>Software design risks</h3>\n<p>Choosing the right tech stack requires extensive software development experience. Choosing the right data model for your ERP / MES requires extensive domain expertise in manufacturing software systems, which is a different skill. Design mistakes made early on can be costly to undo later on.</p>\n<h2 id=\"the-buy-and-build-approach\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-buy-and-build-approach\"><span class=\"icon icon-link\"></span></a>The <strong>Buy and Build</strong> Approach</h2>\n<p>There are significant upsides and downsides to both the Buy approach and Build approach. However, there is a third approach: Buy and Build.</p>\n<p>The key insight of this approach is that all digital manufacturing businesses require the same foundation: a core system of record for business data and processes (quotes, orders, invoices, etc) and manufacturing data and processes (bills of material, inventory, production tracking, etc).</p>\n<p>An invoice is an invoice, regardless of what your business manufactures. Building these core concepts from the ground up does not represent an opportunity for a competitive advantage. However, the ability to seamlessly integrate these concepts into the other aspects of your software stack (your customer interface, your business intelligence and analytics platform, your proprietary manufacturing technology, your interfaces with your machine tools, etc) <em>does</em> represent an opportunity for a competitive advantage.</p>\n<p>The Buy and Build approach involves buying an extensible manufacturing operating system and then building a custom end-to-end, fully integrated software solution on top of it.</p>\n<h2 id=\"introducing-carbonos\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#introducing-carbonos\"><span class=\"icon icon-link\"></span></a>Introducing Carbon</h2>\n<p>We created Carbon specifically for digital manufacturers looking to Buy and Build. Carbon is:</p>\n<ul>\n<li>A <strong>next-gen manufacturing operating system</strong> including ERP, MES, and more – designed and built by a team of manufacturing experts with decades of collective experience in the industry.</li>\n<li><strong>API-first</strong> – designed from the ground up to be the extensible foundation of your custom end-to-end operating system.</li>\n<li><strong>Source-available</strong> – with direct access to the source code, you can customize every aspect of the system to match the unique needs of your business. Plus, you own the software so you don't have to worry about vendor lock-in.</li>\n<li>Built on a <strong>cutting-edge tech stack</strong> – including tools like Remix, Supabase, shadcn, Tailwind CSS, Vercel and more.</li>\n<li><strong>Enterprise-ready</strong> – with support for multi-company and multi-currency businesses.</li>\n</ul>\n<p>Building on top of Carbon gives you the best of both worlds.</p>\n<p>Carbon comes out of the box with all of the functionality you need to run your factory. This means you don't need to dedicate multiple engineers and over a year to reinventing the wheel when it comes to core ERP and MES functionality.</p>\n<p>Plus, it provides an extensible foundation upon which you can build your end-to-end, fully integrated software stack.</p>\n<ul>\n<li>With access to the comprehensive API and the source code itself, you can customize Carbon in any way you need to work seamlessly with your other software tools.</li>\n<li>With the Carbon SDK you can seamlessly integrate Carbon into your branded customer interface and proprietary technology and automation.</li>\n<li>With direct access to the database, you can connect your favorite BI / analytics tool, or create your own custom dashboards and reports.</li>\n<li>With the advent of AI-enabled development tools, it's never been easier to build custom applications and workflows on top of an API-first system of record like Carbon.</li>\n</ul>\n<p>If you're interested in learning more about Carbon, get started with a free trial and we'll reach out to schedule a call.</p>",
    "author": {
      "name": "Rob Carrington",
      "avatar": "/faces/rob.webp",
      "title": "CEO & Co-Founder"
    }
  },
  {
    "metadata": {
      "meta:": "",
      "title": "In Manufacturing, Configuration Is All You Need",
      "publishedAt": "2025-01-03",
      "summary": "Configuration is the cornerstone of digital manufacturing. It's the foundation that enables manufacturers to create custom products and services that meet the unique needs of their customers.",
      "image": "/images/stone-arch.webp",
      "author": "brad"
    },
    "slug": "configuration-is-all-you-need",
    "html": "<p>OK, it's not <em>all</em> you need. You also need good people, good processes, etc. But in order to do instant website-to-production for custom manufacturing, you need to be able to <strong>automatically</strong> configure your bill of material and routing.</p>\n<p><img src=\"/images/instant-quoting-flow-1.webp\" alt=\"Instant Website-to-Production\"></p>\n<p>From a customer's perspective, the process looks something like this:</p>\n<ol>\n<li>A customer makes a request in a web portal</li>\n<li>The customer immediately receives a quote with the price and lead time for their request</li>\n<li>The customer places an order directly from the portal</li>\n<li>The order is automatically placed in the production queue</li>\n</ol>\n<p>In order to achieve points 2 and 4, you need to be able to automatically determine what materials will be required to make the product (bill of materials), and what production steps will be required to make the product (routing).</p>\n<h2 id=\"what-is-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-is-configuration\"><span class=\"icon icon-link\"></span></a>What is Configuration?</h2>\n<p>Configuration is the set of functions that map your unique manufacturing parameters to the standard bill of material and routing.</p>\n<p><img src=\"/images/configuration-function.webp\" alt=\"Configuration Function\"></p>\n<h2 id=\"defining-the-parameters\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#defining-the-parameters\"><span class=\"icon icon-link\"></span></a>Defining the Parameters</h2>\n<p>Let's say we're a door manufacturer. In order to do instant quoting-to-production, we need to create at an accurate bill of material and bill of process (routing) for each door. But customers can choose the exact dimensions of their door, they can choose the material, the hinges, etc.</p>\n<p>It doesn't make sense for us to try to maintain a database of every possible door combination for two reasons.</p>\n<ol>\n<li>It's not scalable. Even with 3 or 4 variables, we can't possibly manually support every possible door configuration.</li>\n<li>It's impossible to maintain. Say we make a process improvement. We'd have to update the routing for every combination.</li>\n</ol>\n<p>So we need a way to instantly create an accurate bill of material and routing (and cost estimate) for any possible door configuration from a constantly-evolving template.</p>\n<p>Let's take a look at a few examples.</p>\n<h3 id=\"example-1-doors\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-1-doors\"><span class=\"icon icon-link\"></span></a>Example 1: Doors</h3>\n<p>Here's a simple example of how we might \"define\" a door to be manufactured represented in TypeScript:</p>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #83D6C5\">type</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">Params</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\"><span style=\"color: #D6D6DD\">  wood</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Oak\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Maple\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Walnut\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Cherry\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Pine\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #D6D6DD\">  width</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">number</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #D6D6DD\">  height</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">number</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #D6D6DD\">  hinges</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Left\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Right\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #D6D6DD\">  lock</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Single\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Double\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #D6D6DD\">};</span>\n</span></code></pre></div>\n<p>If we look at a sheet metal part, we have a similar situation.</p>\n<h3 id=\"example-2-sheet-metal\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-2-sheet-metal\"><span class=\"icon icon-link\"></span></a>Example 2: Sheet Metal</h3>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #83D6C5\">type</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">Params</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\"><span style=\"color: #D6D6DD\">  material</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Aluminum\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Steel\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Stainless Steel\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #D6D6DD\">  thickness</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"0.25\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"0.5\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"0.75\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"1\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #D6D6DD\">  width</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">number</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #D6D6DD\">  height</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">number</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #D6D6DD\">  cutDistance</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">number</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #D6D6DD\">};</span>\n</span></code></pre></div>\n<p>We might add parameters like number of bends, number of holes, etc. But the gist is the same. We have a set of parameters that can determine the bill of material and routing.</p>\n<p>It might seem like a big leap, but the same idea holds true for any discrete manufacturing that is not mass-produced. Here's a slight oversimplified example of how a boat might be configured:</p>\n<h3 id=\"example-3-boat\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-3-boat\"><span class=\"icon icon-link\"></span></a>Example 3: Boat</h3>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #83D6C5\">type</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">Params</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\"><span style=\"color: #D6D6DD\">  engine</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"XSB\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"XSB2\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #D6D6DD\">  autopilot</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">boolean</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #D6D6DD\">  color</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Red\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Blue\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Green\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Yellow\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #D6D6DD\">  secondStation</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">boolean</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #D6D6DD\">  upholstery</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Gray\"</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">|</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Navy\"</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #D6D6DD\">  ledUpgrades</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">boolean</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"8\"><span style=\"color: #D6D6DD\">  navigationUpgrade</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">boolean</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"9\"><span style=\"color: #D6D6DD\">};</span>\n</span></code></pre></div>\n<p>The idea is that for any made-to-order or made-to-print part, we can define a set of parameters that can determine the bill of material and routing.</p>\n<h2 id=\"using-the-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-the-configuration\"><span class=\"icon icon-link\"></span></a>Using the Configuration</h2>\n<p>OK, so now that we understand the problem, let's jump to the solution. The solution for instant website-to-production can be generalized into three steps:</p>\n<p><img src=\"/images/instant-quoting-flow-2.webp\" alt=\"Instant Website-to-Production\"></p>\n<ol>\n<li>A customer-facing app allows the customer to select some options. This can basically be reduced to a set of dropdowns and checkboxes (and depending on the business, a CAD model and a drawing).</li>\n<li>Some proprietary system takes the inputs of step 1, and turns them into a set of parameters (like we defined above). In the sheet metal example, this might be an API that determines the cut length and number of bends from a CAD model. For a door and boat manufacturer, we might skip this step and just use the parameters from the customer-facing app.</li>\n<li>The system of record configures the BoM and routing by passing the parameters from step 2 and returns price back.</li>\n</ol>\n<p>Here's a simplified look at how step 3 would work with the Carbon SDK:</p>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> carbon </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">getCarbon</span><span style=\"color: #D6D6DD\">();</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\">\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #6D6D6D\">// this comes from step 1 and step 2</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> configuration </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">material:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Oak\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">width:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #EBC88D\">36</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">height:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #EBC88D\">80</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"8\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">hinges:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Left\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"9\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">lock:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Single\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"10\"><span style=\"color: #D6D6DD\">};</span>\n</span><span class=\"codeblock-line\" data-line-number=\"11\">\n</span><span class=\"codeblock-line\" data-line-number=\"12\"><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> quote </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">await</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">upsertQuote</span><span style=\"color: #D6D6DD\">(carbon, {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"13\"><span style=\"color: #D6D6DD\">  customerId,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"14\"><span style=\"color: #D6D6DD\">  customerLocationId,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"15\"><span style=\"color: #D6D6DD\">});</span>\n</span><span class=\"codeblock-line\" data-line-number=\"16\">\n</span><span class=\"codeblock-line\" data-line-number=\"17\"><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> quoteLine </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">await</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">upsertConfiguredQuoteLine</span><span style=\"color: #D6D6DD\">(carbon, {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"18\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">quoteId:</span><span style=\"color: #D6D6DD\"> quote.data.id,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"19\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">itemId:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"DOOR\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"20\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">quantity:</span><span style=\"color: #D6D6DD\"> [</span><span style=\"color: #EBC88D\">1</span><span style=\"color: #D6D6DD\">, </span><span style=\"color: #EBC88D\">10</span><span style=\"color: #D6D6DD\">, </span><span style=\"color: #EBC88D\">100</span><span style=\"color: #D6D6DD\">],</span>\n</span><span class=\"codeblock-line\" data-line-number=\"21\"><span style=\"color: #D6D6DD\">  configuration,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"22\"><span style=\"color: #D6D6DD\">});</span>\n</span><span class=\"codeblock-line\" data-line-number=\"23\">\n</span><span class=\"codeblock-line\" data-line-number=\"24\"><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> prices </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #83D6C5\">await</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">getQuotePrices</span><span style=\"color: #D6D6DD\">(carbon, {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"25\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">quoteLineId:</span><span style=\"color: #D6D6DD\"> quoteLine.data.id,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"26\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #EFB080\">markup:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #EBC88D\">0.3</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"27\"><span style=\"color: #D6D6DD\">});</span>\n</span><span class=\"codeblock-line\" data-line-number=\"28\">\n</span><span class=\"codeblock-line\" data-line-number=\"29\"><span style=\"color: #83D6C5\">return</span><span style=\"color: #D6D6DD\"> prices.data;</span>\n</span></code></pre></div>\n<h2 id=\"defining-the-template\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#defining-the-template\"><span class=\"icon icon-link\"></span></a>Defining the Template</h2>\n<p>The careful reader might have noticed that we've so far said nothing about the configuration itself. Now that we know what we're trying to do, let's take a look at how the sausage is made.</p>\n<p>A configuration is a function that takes the set of parameters and returns a value. It's like a little lambda function that you can use to define each aspect of the bill of material and routing.</p>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #6D6D6D\">// Setup time</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\">\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #6D6D6D\">/**</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #6D6D6D\"> * Configure function that processes the provided params</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@returns</span><span style=\"color: #6D6D6D\"> an array of predefined values</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@param</span><span style=\"color: #6D6D6D\"> params.material: \"Oak\"</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@param</span><span style=\"color: #6D6D6D\"> params.width: number</span>\n</span><span class=\"codeblock-line\" data-line-number=\"8\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@param</span><span style=\"color: #6D6D6D\"> params.height: number</span>\n</span><span class=\"codeblock-line\" data-line-number=\"9\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@param</span><span style=\"color: #6D6D6D\"> params.hinges: \"Left\" | \"Right\"</span>\n</span><span class=\"codeblock-line\" data-line-number=\"10\"><span style=\"color: #6D6D6D\"> * </span><span style=\"color: #83D6C5\">@param</span><span style=\"color: #6D6D6D\"> params.lock: \"Single\" | \"Double\"</span>\n</span><span class=\"codeblock-line\" data-line-number=\"11\"><span style=\"color: #6D6D6D\"> **/</span>\n</span><span class=\"codeblock-line\" data-line-number=\"12\">\n</span><span class=\"codeblock-line\" data-line-number=\"13\"><span style=\"color: #83D6C5\">function</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">configure</span><span style=\"color: #D6D6DD\">(params</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">Params</span><span style=\"color: #D6D6DD\">) {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"14\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #83D6C5\">if</span><span style=\"color: #D6D6DD\"> (params.material </span><span style=\"color: #83D6C5\">===</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"Pine\"</span><span style=\"color: #D6D6DD\">) {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"15\"><span style=\"color: #D6D6DD\">    </span><span style=\"color: #83D6C5\">return</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #EBC88D\">10</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"16\"><span style=\"color: #D6D6DD\">  }</span>\n</span><span class=\"codeblock-line\" data-line-number=\"17\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #83D6C5\">return</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #EBC88D\">20</span><span style=\"color: #D6D6DD\">;</span>\n</span><span class=\"codeblock-line\" data-line-number=\"18\"><span style=\"color: #D6D6DD\">}</span>\n</span></code></pre></div>\n<p>In this case, we're configuring setup time. Here's an example of how we might configure the material of the door.</p>\n<div data-code-block=\"\" data-line-numbers=\"true\" data-lang=\"tsx\"><pre data-line-numbers=\"true\" data-lang=\"tsx\" style=\"color: #d6d6dd;\"><code><span class=\"codeblock-line\" data-line-number=\"1\"><span style=\"color: #6D6D6D\">// Item ID</span>\n</span><span class=\"codeblock-line\" data-line-number=\"2\">\n</span><span class=\"codeblock-line\" data-line-number=\"3\"><span style=\"color: #83D6C5\">function</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #AAA0FA\">configure</span><span style=\"color: #D6D6DD\">(params</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">Params</span><span style=\"color: #D6D6DD\">)</span><span style=\"color: #83D6C5\">:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #82D2CE\">string</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"4\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #83D6C5\">const</span><span style=\"color: #D6D6DD\"> itemIds </span><span style=\"color: #83D6C5\">=</span><span style=\"color: #D6D6DD\"> {</span>\n</span><span class=\"codeblock-line\" data-line-number=\"5\"><span style=\"color: #D6D6DD\">    </span><span style=\"color: #EFB080\">Pine:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"1234567890\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"6\"><span style=\"color: #D6D6DD\">    </span><span style=\"color: #EFB080\">Oak:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"1234567891\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"7\"><span style=\"color: #D6D6DD\">    </span><span style=\"color: #EFB080\">Maple:</span><span style=\"color: #D6D6DD\"> </span><span style=\"color: #E394DC\">\"1234567892\"</span><span style=\"color: #D6D6DD\">,</span>\n</span><span class=\"codeblock-line\" data-line-number=\"8\"><span style=\"color: #D6D6DD\">  };</span>\n</span><span class=\"codeblock-line\" data-line-number=\"9\">\n</span><span class=\"codeblock-line\" data-line-number=\"10\"><span style=\"color: #D6D6DD\">  </span><span style=\"color: #83D6C5\">return</span><span style=\"color: #D6D6DD\"> itemIds[params.material];</span>\n</span><span class=\"codeblock-line\" data-line-number=\"11\"><span style=\"color: #D6D6DD\">}</span>\n</span></code></pre></div>\n<p>For any field in the bill of material or routing, we can define a configuration function that takes the set of parameters and returns the value. We can get more sophisticated to include more complex logic for adding and removing parts and operations, but the idea is the same.</p>\n<p><img src=\"/images/configurator-demo.gif\" alt=\"Configuration Demo\"></p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>Configuration allows made-to-order or made-to-print manufacturers to instantly create the bill of material and routing that drives production.</p>",
    "author": {
      "name": "Brad Barbin",
      "avatar": "/faces/brad.webp",
      "title": "CTO & Co-Founder"
    }
  },
  {
    "metadata": {
      "meta:": "",
      "title": "How Digital Manufacturers Can Craft a Delightful Buyer Experience in 2025",
      "publishedAt": "2025-01-02",
      "summary": "The article explains how manufacturing businesses can create a modern digital buying experience that meets customer expectations by making their services easily discoverable online, reducing friction for first-time buyers through clear website content and custom intake forms, and providing self-service options for repeat customers through dedicated portals that allow order tracking and reordering.",
      "image": "/images/glass-cabin.webp",
      "author": "rob"
    },
    "slug": "delightful-experience",
    "html": "<p>E-commerce pioneers like Amazon have forever changed buyers' expectations by providing frictionless one-click purchase options, comprehensive order tracking and history, quick turnaround times, and a seamless search experience. These expectations have permeated other areas of commerce beyond consumer goods, including digital manufacturing. In 2025, supply chain buyers want to be able to:</p>\n<ol>\n<li>Do an Internet search</li>\n<li>Quickly find suppliers who sell what they need</li>\n<li>Get pricing ASAP (instant pricing is ideal)</li>\n<li>Place an order and track its progress</li>\n<li>All without ever picking up the phone</li>\n</ol>\n<p>Moving from a traditional email or phone-based system to a digital buying experience may sound like a daunting task. But it's actually easier than you might think – you just need to break the problem down into smaller pieces.</p>\n<p>In this article we'll break down the steps you can take to craft a delightful buying experience for your customers.</p>\n<ul>\n<li><a href=\"#1-make-it-easy-to-find-you\">1. Make it Easy to Find You</a></li>\n<li><a href=\"#2-reduce-friction-for-first-time-buyers\">2. Reduce Friction for First-time Buyers</a></li>\n<li><a href=\"#3-provide-self-service-options-for-repeat-buyers\">3. Provide Self-Service Options for Repeat Buyers</a></li>\n<li><a href=\"#4-choose-the-right-software-stack\">4. Choose the Right Software Stack</a></li>\n</ul>\n<h2 id=\"1-make-it-easy-to-find-you\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-make-it-easy-to-find-you\"><span class=\"icon icon-link\"></span></a>1. Make it Easy to Find You</h2>\n<p>It may seem obvious, but the first and most important step in building a digital buying experience is creating a website that is easily discoverable. You want your website to rank highly in your customers' search engine results.</p>\n<p>There is an <a href=\"https://moz.com/beginners-guide-to-seo\">entire discipline of marketing</a> devoted to this subject, so we won't cover it in exhaustive detail here. The gist is that your website should load fast, include keywords that your customers search for, and provide helpful content that increases the average amount of time customers spend on your site.</p>\n<h2 id=\"2-reduce-friction-for-first-time-buyers\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-reduce-friction-for-first-time-buyers\"><span class=\"icon icon-link\"></span></a>2. Reduce Friction for First-time Buyers</h2>\n<p>Buyers hate friction. One of the keys to Amazon's success is that they make it <em>so easy</em> to buy from them.</p>\n<p>Any step of the buying process that is more difficult than it needs to be creates an opportunity for the buyer to abandon the purchase. This is especially true for first-time buyers, since you haven't yet established a relationship.</p>\n<p>Here are some simple steps you can take to dramatically reduce friction for your first-time buyers:</p>\n<h3 id=\"make-it-clear-what-you-sell\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#make-it-clear-what-you-sell\"><span class=\"icon icon-link\"></span></a>Make it Clear What You Sell</h3>\n<p>Your website needs to be very clear about what products and services you sell. Highlight your capabilities, especially any capabilities that differentiate you from your competitors. Not only will this help with discoverability (keywords, etc), it will help your buyers quickly determine that you can solve their problem and move to the next stage in the buying journey.</p>\n<h3 id=\"build-a-custom-intake-form\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-a-custom-intake-form\"><span class=\"icon icon-link\"></span></a>Build a Custom Intake Form</h3>\n<p>Custom manufacturers need to collect information from their customers in order to generate pricing. However, different kinds of manufacturers need to collect different kinds of information:</p>\n<ul>\n<li><strong>Make-to-Print Job Shop</strong>: Make it as easy as possible for customers to upload prints, 3D models, and other related documentation.</li>\n<li><strong>Configure-to-Order Manufacturer</strong>: Provide a dynamic Configurator, so customers can select all of the relevant options from a structured form.</li>\n</ul>\n<p>A custom form that is unique to your business allows you to collect the exact information you need to generate pricing for the job. Using structured fields like drop-down selectors and date selectors minimizes the effort required from the buyer to request a quote (and also makes your jobs easier when you receive the form submission).</p>\n<p>[Show screenshot of our sample RFQ form]</p>\n<h2 id=\"3-provide-self-service-options-for-repeat-buyers\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-provide-self-service-options-for-repeat-buyers\"><span class=\"icon icon-link\"></span></a>3. Provide Self-Service Options for Repeat Buyers</h2>\n<p>Repeat buyers have overcome the initial hurdle of finding a supplier who can meet their needs (you!), but they still face other kinds of friction. Repeat buyers want to be able to:</p>\n<ol>\n<li>See their full history of quotes and orders</li>\n<li>Place a repeat order for something they've already purchased</li>\n<li>Get a fast quote for net-new projects</li>\n<li>Track the progress of current orders, including shipping dates</li>\n</ol>\n<h3 id=\"build-a-custom-self-service-portal\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-a-custom-self-service-portal\"><span class=\"icon icon-link\"></span></a>Build a Custom Self-Service Portal</h3>\n<p>The best way to minimize friction for repeat customers is to build a custom self-service portal. Once a customer logs in to the portal, they will be able to do all of the above without having to reach out to your company.</p>\n<p>The self-service portal reduces communication overhead. Customers don't like having to ask when their order will ship, and you probably don't like having to field those questions. Giving customers the ability to self-serve for the majority of their common needs makes it <em>easy</em> to do business with you, and allows your team to focus on providing exceptional customer service for interactions that can't be handled in the portal.</p>\n<h2 id=\"4-choose-the-right-software-stack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-choose-the-right-software-stack\"><span class=\"icon icon-link\"></span></a>4. Choose the Right Software Stack</h2>\n<p>Building a Custom Intake Form and Custom Self-Service Portal will dramatically reduce the friction your customers experience in their buying journey. But in order to build the Form and Portal, you will need to build on top of the right software stack.</p>\n<p>Submissions from the Intake Form could feed a communication tool like Slack or Microsoft Teams, or possibly a CRM tool like Salesforce or Hubspot. However, given that these inquiries will eventually turn into orders, it generally makes the most sense to capture submissions in your ERP/MES.</p>\n<p>Similarly, the Self-Service Portal needs to provide customers with secure access to their quote and order history, and display the progress of current orders. That information all likely lives in the ERP/MES as well.</p>\n<p>There are many considerations that go into selecting (or building) the right ERP/MES solution. Ideally, the Intake Form and Portal should be built on top of a system that:</p>\n<ul>\n<li>Has a robust API (REST and realtime)</li>\n<li>Captures custom form submissions as structured data</li>\n<li>Automatically generates Bills of Material and Bills of Process from form submissions</li>\n<li>Provides robust permissions management for customer data</li>\n</ul>\n<p>Carbon is an API-first, extensible operating system for digital manufacturers. We designed it from the ground up to do all of the above, and more. Carbon serves as the foundation of your vertically integrated, end-to-end solution, providing automation and enhanced visibility across the whole buyer journey from RFQ through to shipped orders.</p>\n<p>If you're interested in learning more about Carbon, get started with a free trial and we'll reach out to schedule a call.</p>",
    "author": {
      "name": "Rob Carrington",
      "avatar": "/faces/rob.webp",
      "title": "CEO & Co-Founder"
    }
  },
  {
    "metadata": {
      "meta:": "",
      "title": "How to Build an Instant Quoting Engine for Configure-to-Order Manufacturing",
      "publishedAt": "2025-01-04",
      "summary": "The article explains how digital manufacturers can implement instant quoting systems to match modern e-commerce expectations, outlining steps from creating digital RFQ forms to automating Bills of Materials through ERP/MES systems or custom software, with the goal of reducing quote delivery time from days to seconds to improve sales conversion.",
      "image": "/images/plane.webp",
      "author": "rob"
    },
    "slug": "how-to-instant-quote",
    "html": "<p>In 2025, buyers expect more from their suppliers. E-commerce giants like Amazon and Shopify have made online buying <em>easy</em>. Consumers can see instant pricing and availability for a wide range of products, and place 1-click orders, all from their smartphone.</p>\n<p>If you are a Digital Manufacturer looking to increase revenue or boost customer retention, take a page from the E-commerce playbook:</p>\n<p>Make it <strong>easy</strong> to buy from you.</p>\n<p>When ordering custom configured products, one of the main sources of friction buyers experience is simply waiting for a quote. The difference between waiting five days for a quote or waiting five seconds for a quote could very well be the difference between making the sale or losing the opportunity.</p>\n<p>In this article we’ll break down the concrete set of steps you can follow to build an instant quoting engine to <a href=\"/learn/delightful-experience\">streamline your customers’ buying experience</a>.</p>\n<h2 id=\"table-of-contents\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#table-of-contents\"><span class=\"icon icon-link\"></span></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#build-a-digital-rfq-form\">Build a Digital RFQ Form</a></li>\n<li><a href=\"#automate-your-bill-of-materials\">Automate Your Bill of Materials</a>\n<ul>\n<li><a href=\"#build-the-automation-within-your-erpmes\">Build the Automation Within Your ERP/MES</a></li>\n<li><a href=\"#custom-software-automation\">Custom Software Automation</a></li>\n</ul>\n</li>\n<li><a href=\"#deliver-the-instant-quote\">Deliver the Instant Quote</a>\n<ul>\n<li><a href=\"#directly-on-your-website\">Directly on Your Website</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"build-a-digital-rfq-form\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-a-digital-rfq-form\"><span class=\"icon icon-link\"></span></a>Build a Digital RFQ Form</h2>\n<p>The first step in providing an instant quote is getting the product configuration request from your customer. The best way to do this is with a digital request-for-quote (RFQ) form that:</p>\n<ol>\n<li>Is easy for customers to find (directly on your website, ideally)</li>\n<li>Clearly indicates what configuration options are available</li>\n<li>Captures the RFQ details in a structured digital format (i.e., not a blob of text)</li>\n</ol>\n<p><img src=\"/images/customer-portal.webp\" alt=\"Customer Portal Example\"></p>\n<p>Your RFQ form should provide structured fields (drop-downs, date selectors, etc) that make it as easy as possible for your customers to browse the available options and make their selections. The simplest way to build such a form is to use a tool like <a href=\"https://www.typeform.com/\">Typeform</a>. However, if you want to have complete control over the style and branding of your RFQ form – and if you want to be able to render an instant quote directly on your website – you’ll want to either build your own form, or hire someone to build it for you (like us!).</p>\n<h2 id=\"automate-your-bill-of-materials\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#automate-your-bill-of-materials\"><span class=\"icon icon-link\"></span></a>Automate Your Bill of Materials</h2>\n<p>The next step is to determine what materials (Bill of Materials, BoM) and labor steps (Bill of Process, BoP) are required to produce the desired configuration of the product. The goal at this stage is to understand what your cost will be, so you can figure out the appropriate price to quote the customer.</p>\n<p>In order for the quote to be instant, the process for creating the BoM and BoP must be fully automated via software. This software automation needs to know about:</p>\n<ul>\n<li>All the materials that could potentially be required</li>\n<li>Their costs, inventory levels, etc</li>\n<li>All of the labor steps that could be required and their costs</li>\n</ul>\n<p>This information typically lives in your ERP/MES system. There are two main ways to build this software automation:</p>\n<h3 id=\"build-the-automation-within-your-erpmes\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-the-automation-within-your-erpmes\"><span class=\"icon icon-link\"></span></a>Build the Automation Within Your ERP/MES</h3>\n<p>Some ERP/MES solutions give users the ability to automatically generate a BoM and BoP based on a set of input parameters. For example, Carbon has an extremely flexible automation module called the Configurator – check out this <a href=\"/learn/configuration-is-all-you-need\">feature highlight article</a> to learn more.</p>\n<p>Tools like the Configurator allow users to specify logic rules that can be used to automatically generate the BoM and BoP. For example, you could create a rule that says “If the customer selects Option X, add Raw Material A to the BoM”.</p>\n<p><img src=\"/images/configurator.webp\" alt=\"Configurator Example\"></p>\n<p>Once the BoM and BoP have been assembled, the cost and price can also be calculated automatically and the quote can be prepared to send to the customer.</p>\n<p>The benefit of building this automation within your ERP/MES is that all of the information needed to produce the product will be ready to go when the customer places an order. It is often as simple as a single button click to convert the quote into a sales order or job to begin production.</p>\n<h3 id=\"custom-software-automation\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#custom-software-automation\"><span class=\"icon icon-link\"></span></a>Custom Software Automation</h3>\n<p>If your ERP/MES does not have an automation tool like the Configurator built in, it may be possible to build custom software automation external to your ERP/MES. In order for this to work your ERP/MES must have a robust API that provides access to all of the data listed above.</p>\n<p>The downside to this approach is that the external application will need to pull a lot of data from the ERP/MES for each RFQ, and it may not be possible to create the BoM and BoP inside the ERP/MES as part of this process.</p>\n<h2 id=\"deliver-the-instant-quote\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#deliver-the-instant-quote\"><span class=\"icon icon-link\"></span></a>Deliver the Instant Quote</h2>\n<p>There are two primary ways to deliver an instant quote:</p>\n<h3 id=\"directly-on-your-website\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#directly-on-your-website\"><span class=\"icon icon-link\"></span></a>Directly on Your Website</h3>\n<p>There are some key benefits to delivering the quote on the same page where the customer requested it:</p>\n<ol>\n<li><strong>Reduced Friction</strong>: The customer can see the price – and place an order – without leaving the page</li>\n<li><strong>Creative Control</strong>: You have more control over the look and feel of the quote on your website than you do in another medium like email</li>\n</ol>\n<h3 id=\"via-email\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#via-email\"><span class=\"icon icon-link\"></span></a>Via Email</h3>\n<p>If you haven’t set up your website to be able to render the quote, the next best option is to send an email. In fact, even if you do display the quote on your website it is still a good idea to send an email so the customer has a record of the quote even if they navigate away from the page.</p>\n<h2 id=\"putting-it-all-together\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#putting-it-all-together\"><span class=\"icon icon-link\"></span></a>Putting it all Together</h2>\n<p>The specifics of how you put together all the components of your instant quoting system will depend a lot on the technology stack you’ve chosen for your website, ERP/MES, cost automation, etc. There are many benefits to having a <a href=\"/learn/vertically-integrated-stack\">vertically integrated end-to-end system</a> that encompasses all of the above functionality. Carbon is an extensible operating system for manufacturers that is designed specifically to support advanced digital manufacturing use cases like instant quoting.</p>\n<p>Whether you have software developers on staff and want to build on top of a best-in-class software foundation, or are looking for a fully-tailored end-to-end custom solution, feel free to reach out to learn more about how Carbon can transform your business.</p>",
    "author": {
      "name": "Rob Carrington",
      "avatar": "/faces/rob.webp",
      "title": "CEO & Co-Founder"
    }
  }
]
